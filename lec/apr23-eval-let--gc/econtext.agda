{-# OPTIONS --allow-unsolved-metas #-}
module econtext where

open import context
open import lib
open import tp
open import value

econtext : Set
econtext = trie (Œ£ Tp Value)

empty-econtext : econtext
empty-econtext = empty-trie

econtext-lookup : econtext ‚Üí string ‚Üí maybe (Œ£ Tp Value)
econtext-lookup = trie-lookup

econtext-contains : econtext ‚Üí string ‚Üí ùîπ
econtext-contains = trie-contains

econtext-insert : econtext ‚Üí string ‚Üí (Œ£ Tp Value) ‚Üí econtext
econtext-insert = trie-insert

econtext-fsts : (Œ£ Tp Value) ‚Üí Tp
econtext-fsts (t , v) = t

to-context : econtext ‚Üí context
to-context E = trie-map econtext-fsts E

lookup-to-context : ‚àÄ(E : econtext)(v : ùïÉ char) ‚Üí ‚àÄ{p : maybe (Œ£ Tp Value)} ‚Üí
                    trie-lookup-h E v ‚â° p ‚Üí
                    trie-lookup-h (to-context E) v ‚â° maybe-map econtext-fsts p
lookup-to-context (Node x _) [] q rewrite q = refl
lookup-to-context (Node x ts) (c :: v) q with cal-lookup ts c
lookup-to-context (Node x ts) (c :: v) q | nothing rewrite sym q = {!!}
lookup-to-context (Node x ts) (c :: v) q | just t = {!!}
{-
lookup-to-context (Node x ((a , E') :: x‚ÇÉ)) (c :: v) q with a =char c
lookup-to-context (Node x ((a , E') :: x‚ÇÉ)) (c :: v) q | tt = lookup-to-context E' v q
lookup-to-context (Node x ((a , E') :: x‚ÇÉ)) (c :: v) q | ff = {!!}

-}
