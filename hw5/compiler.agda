module compiler where

open import expr
open import lib

eqTp‚â° : ‚àÄ {T1 T2} ‚Üí eqTp T1 T2 ‚â° tt ‚Üí T1 ‚â° T2
eqTp‚â° {TpBool} {TpBool} x = refl
eqTp‚â° {TpNat} {TpBool} ()
eqTp‚â° {TpBool} {TpNat} ()
eqTp‚â° {TpNat} {TpNat} x = refl

tpCheck : RawExpr ‚Üí maybe (Œ£ Tp (Œª T ‚Üí Expr T))
tpCheck (Num x) = just(TpNat , Num x)

tpCheck (Bool x) = just(TpBool , Bool x)

{- here is one example case in the style I found easiest to deal with (I suggest
   implementing the cases for Lt and Ite similarly). -}
tpCheck (Add r r') with tpCheck r | tpCheck r' 
tpCheck (Add r r') | just(TpNat , e1) | just(TpNat , e2) = just(TpNat , Add e1 e2)
tpCheck (Add r r') | _ | _ = nothing

tpCheck (Lt r r') with tpCheck r | tpCheck r'
tpCheck (Lt r r') | just(TpNat , e1) | just(TpNat , e2) = just(TpBool , Lt e1 e2)
tpCheck (Lt r r') | _ | _ = nothing

tpCheck (Ite i t e) with tpCheck i | tpCheck t | tpCheck e
tpCheck (Ite i t e) | just(TpBool , e1) | just(TpNat , e2) | just(TpNat , e3) = just(TpNat , Ite e1 e2 e3)
tpCheck (Ite i t e) | just(TpBool , e1) | just(TpBool , e2) | just(TpBool , e3) = just(TpBool , Ite e1 e2 e3)
tpCheck (Ite i t e) | _ | _ | _ = nothing


confirm : tpCheck testRawExpr ‚â° just (TpBool , testExpr)
confirm = refl

data AddExpr : Set where
  Num : ‚Ñï ‚Üí AddExpr
  AddNum : ‚Ñï ‚Üí AddExpr ‚Üí AddExpr

data LtExpr : Tp ‚Üí Set where
  injAddExpr : AddExpr ‚Üí LtExpr TpNat
  Lt : AddExpr ‚Üí AddExpr ‚Üí LtExpr TpBool
  Bool : ùîπ ‚Üí LtExpr TpBool

data IteExpr : Tp ‚Üí Set where
  injLtExpr : ‚àÄ{T : Tp} ‚Üí LtExpr T ‚Üí IteExpr T
  Ite : ‚àÄ{T : Tp} ‚Üí LtExpr TpBool ‚Üí IteExpr T ‚Üí IteExpr T ‚Üí IteExpr T


fixAddition : AddExpr ‚Üí AddExpr ‚Üí AddExpr
fixAddition (Num x) x‚ÇÅ = AddNum x x‚ÇÅ
fixAddition (AddNum x x‚ÇÇ) x‚ÇÅ = AddNum x (fixAddition x‚ÇÇ x‚ÇÅ)

addIte : IteExpr TpNat ‚Üí IteExpr TpNat ‚Üí IteExpr TpNat
addIte (injLtExpr (injAddExpr x)) (injLtExpr (injAddExpr x‚ÇÅ)) = injLtExpr (injAddExpr (fixAddition x x‚ÇÅ))
addIte (injLtExpr x) (Ite x‚ÇÅ x‚ÇÇ x‚ÇÉ) = Ite x‚ÇÅ (addIte x‚ÇÇ (injLtExpr x)) (addIte x‚ÇÉ (injLtExpr x))
addIte (Ite x x‚ÇÅ x‚ÇÇ) (injLtExpr x‚ÇÉ) = Ite x (addIte (injLtExpr x‚ÇÉ) x‚ÇÅ) (addIte (injLtExpr x‚ÇÉ) x‚ÇÇ)
addIte (Ite x x‚ÇÅ x‚ÇÇ) (Ite x‚ÇÉ x‚ÇÑ x‚ÇÖ) = Ite x (Ite x‚ÇÉ (addIte (x‚ÇÅ) (x‚ÇÑ)) (addIte (x‚ÇÅ) (x‚ÇÖ))) (Ite x‚ÇÉ (addIte (x‚ÇÇ) (x‚ÇÑ)) (addIte (x‚ÇÇ) (x‚ÇÖ))) 



ltIte : IteExpr TpNat ‚Üí IteExpr TpNat -> IteExpr TpBool
ltIte (injLtExpr (injAddExpr x)) (injLtExpr (injAddExpr x‚ÇÅ)) = injLtExpr (Lt x x‚ÇÅ)
ltIte (injLtExpr x) (Ite x‚ÇÅ x‚ÇÇ x‚ÇÉ) = Ite x‚ÇÅ (ltIte x‚ÇÇ (injLtExpr x)) (ltIte x‚ÇÉ (injLtExpr x))
ltIte (Ite x x‚ÇÅ x‚ÇÇ) (injLtExpr x‚ÇÉ) = Ite x (ltIte (injLtExpr x‚ÇÉ) x‚ÇÅ) (ltIte (injLtExpr x‚ÇÉ) x‚ÇÇ)
ltIte (Ite x x‚ÇÅ x‚ÇÇ) (Ite x‚ÇÉ x‚ÇÑ x‚ÇÖ) = Ite x (Ite x‚ÇÉ (ltIte (x‚ÇÅ) (x‚ÇÑ)) (ltIte (x‚ÇÅ) (x‚ÇÖ))) (Ite x‚ÇÉ (ltIte (x‚ÇÇ) (x‚ÇÑ)) (ltIte (x‚ÇÇ) (x‚ÇÖ)))


toIteExpr : ‚àÄ{T : Tp} ‚Üí Expr T ‚Üí IteExpr T
toIteExpr (Num x) =  injLtExpr (injAddExpr (Num x)) 
toIteExpr (Bool x) = injLtExpr (Bool x)
toIteExpr (Add x x‚ÇÅ) = addIte (toIteExpr x) (toIteExpr x‚ÇÅ)
toIteExpr (Lt x x‚ÇÅ) = ltIte (toIteExpr x) (toIteExpr x‚ÇÅ)
toIteExpr (Ite x x‚ÇÅ x‚ÇÇ) = Ite (Bool (eval x)) (toIteExpr x‚ÇÅ) (toIteExpr x‚ÇÇ)





